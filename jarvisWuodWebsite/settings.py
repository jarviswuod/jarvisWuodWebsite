"""
Django settings for jarvisWuodWebsite project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""


from pathlib import Path
from django.conf import settings
from .ckeditor_config import *

from .logging import LOGGING, parse_admins_json
import os
import environ


env = environ.Env()
environ.Env.read_env()

ENVIRONMENT = env('ENVIRONMENT', default='production')

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!

if ENVIRONMENT == 'development':
    DEBUG = True
else:
    DEBUG = False

 # DEBUG context processor


def global_debug(request):
    return {'debug': settings.DEBUG}


ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


INTERNAL_IPS = [
    'localhost:8000',
    '127.0.0.1:8000',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',

    'django.contrib.sitemaps',
    'admin_honeypot',
    'django_ckeditor_5',

    'blogs.apps.BlogsConfig',
    'jobs.apps.JobsConfig',
    'main.apps.MainConfig',
    'emails.apps.EmailsConfig',
    'users.apps.UsersConfig',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    # Social auths
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.twitter',
    'allauth.socialaccount.providers.linkedin_oauth2',
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': env('OAUTH_GOOGLE_CLIENT_ID'),
            'secret': env('OAUTH_GOOGLE_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
            'prompt': 'consent'
        }
    },
    'github': {
        'APP': {
            'client_id': env('OAUTH_GITHUB_CLIENT_ID'),
            'secret': env('OAUTH_GITHUB_SECRET'),
            'key': ''
        },
        'SCOPE': [
            'read:user',
            'user:email',
        ],
        'AUTH_PARAMS': {
            'prompt': 'consent'
        }
    },
    'twitter': {
        'APP': {
            'client_id': env('OAUTH_TWITTER_CLIENT_ID'),
            'secret': env('OAUTH_TWITTER_SECRET'),
            'key': ''
        },
    },
    "linkedin_oauth2": {
        "APP": {
            "client_id": env('OAUTH_LINKEDIN_CLIENT_ID'),
            "secret":  env('OAUTH_LINKEDIN_SECRET'),
            "key": ""  # not used, leave empty
        },
        "SCOPE": ["r_liteprofile", "r_emailaddress"],
        "PROFILE_FIELDS": ["id", "first-name", "last-name", "email-address", "picture-url"]
    },

}

ACCOUNT_EMAIL_VERIFICATION = "optional"  # or "mandatory"
ACCOUNT_UNIQUE_EMAIL = True

ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]

SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'


SOCIALACCOUNT_ADAPTER = 'users.adapters.SocialAccountAdapter'

USE_TZ = True
TIME_ZONE = 'UTC'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'jarvisWuodWebsite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR, 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # DEBUG context processor
                'jarvisWuodWebsite.settings.global_debug',
            ],
        },
    },
]

WSGI_APPLICATION = 'jarvisWuodWebsite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = '/'


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/


STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATIC_ROOT = BASE_DIR / "staticfiles"

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static")
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email Send Grid API Key
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = env('SENDGRID_API_KEY')
DEFAULT_FROM_EMAIL = 'Jarvis Wuod <' + env('EMAIL_HOST_USER') + '>'
SERVER_EMAIL = env('EMAIL_HOST_USER')
SENDGRID_API_KEY = env('SENDGRID_API_KEY')

ADMINS = parse_admins_json(env('ADMINS_JSON', default='[]'))

SITE_NAME = 'Jarvis Wuod'
SITE_ID = 2
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http"   # or "https" in production
ACCOUNT_DEFAULT_DOMAIN = "localhost:8000"

ACCOUNT_USERNAME_BLACKLIST = ['admin', 'root', 'user', 'strange',]
